
/*
 * React Extensions Manager
 * init command
 */

'use strict';

var fs = require('fs');
var sys = require('sys');
var exec = require('child_process').exec;

var remPodfilePath = "./REM-Podfile";
var remPodfileEncoding = "utf8";
var remPodfileGeneratedText = "# @generated by React Extension Manager\n# Reference the local pods that live in node_modules\n";
var remPodfileGeneratedReactDependency = "pod 'React', '~> 0.2.1'\n";

var podfileGeneratedText = "# @generated by React Extension Manager\n# Links REM-Podfile to the Podfile";
var podfileImportText = "eval(File.open(\"./REM-Podfile\", 'r:utf-8') { |f| f.read })";

module.exports = {
  init: function() {
    console.log("\nInitializing React Extension Environment...");
    var remPodfileData;
    try {
      remPodfileData = fs.readFileSync(remPodfilePath, remPodfileEncoding);
    } catch(err) {
      if (err.code === 'ENOENT') {
        try {
          // REM-Podfile does not exist
          // Create it
          fs.openSync("./REM-Podfile", 'a');
          remPodfileData = fs.readFileSync(remPodfilePath, remPodfileEncoding);
        } catch(err) {
          throw err;
        }
      } else {
        throw err;
      }
    }

    if (remPodfileData != null) {
      // Define markers for REM-Podfile
      if (remPodfileData.indexOf(remPodfileGeneratedText) == -1) {
        // Continue initializing environment
        console.log("Creating REM-Podfile...");

        // Regular Podfile exists
        // Append required REM-Podfile dependencies to Podfile
        var remPodfileText = "\n" + remPodfileGeneratedText;

        // Get package.json
        var projectPackage;
        try {
          projectPackage = fs.readFileSync("./package.json");
        } catch(err) {
          throw err;
        }
        var JSONProjectPackage = JSON.parse(projectPackage);

        // Check to see if custom path is available
        var reactNativeAppProperties = JSONProjectPackage["react-native-app"];
        if (reactNativeAppProperties != null) {
          var customReactPath = reactNativeAppProperties["react-native-path"];
          if (customReactPath != null) {
            // Add custom path as dependency
            remPodfileText = remPodfileText + "pod 'React', :path => '" + customReactPath +"'\n";
          } else {
            // Add React as dependency
            remPodfileText = remPodfileText + remPodfileGeneratedReactDependency;
          }
        } else {
          // Add React as dependency
          remPodfileText = remPodfileText + remPodfileGeneratedReactDependency;
        }

        try {
          fs.writeFileSync(remPodfilePath, remPodfileText);
        } catch(err) {
          throw err;
        }
      } else {
        console.log("Alert: REM-Podfile already initialized\n");
      }

      console.log("Linking REM-Podfile to Podfile");
      var podfileData;
      try {
        podfileData = fs.readFileSync("./Podfile", 'utf8');
      } catch(err) {
        if (err.code === 'ENOENT') {
          throw new Error("Podfile does not exist. Try doing 'pod init' before running this command.");
        } else {
          throw err;
        }
      }

      if (podfileData.indexOf(podfileImportText) != -1) {
        // Import already exists in Podfile
        console.log("Alert: Podfile already linking REM-Podfile");
      } else {
        var newPodfileText = podfileGeneratedText + "\n" + podfileImportText;
        try {
          fs.appendFileSync("./Podfile", newPodfileText);
          console.log("Podfile to REM-Podfile link created.");
        } catch(err) {
          throw err;
        }
      }

      // Created and Linked REM-Podfile
      // Install dependencies
      console.log("Installing dependencies...");
      exec("rem install", function(error, stdout, stderr) {
        console.log(stdout);
      });
    } else {
      throw new Error("Error creating REM-Podfile.");
    }

  },
  isInstalled: function() {
    var remPodfileData;
    try {
      remPodfileData = fs.readFileSync(remPodfilePath, remPodfileEncoding);
    } catch(err) {
      if (err.code === 'ENOENT') {
        try {
          // REM-Podfile does not exist
          // Create it
          fs.openSync("./REM-Podfile", 'a');
          remPodfileData = fs.readFileSync(remPodfilePath, remPodfileEncoding);
        } catch(err) {
          return false;
        }
      } else {
        return false;
      }
    }

    if (remPodfileData.indexOf(remPodfileGeneratedText) != -1) {
      var podfileData;
      try {
        podfileData = fs.readFileSync("./Podfile", 'utf8');
      } catch(err) {
        return false;
      }

      if (podfileData.indexOf(podfileImportText) != -1) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
};
